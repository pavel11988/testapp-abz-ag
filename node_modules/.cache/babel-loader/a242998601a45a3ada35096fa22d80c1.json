{"ast":null,"code":"import photoDefault from '../images/default-photo.jpg';\nconst BASE_URL = 'https://frontend-test-assignment-api.abz.agency/api/v1';\n\nconst axios = require('axios');\n\nlet token;\nlet pages;\n\nasync function getNewToken() {\n  await axios.get(`${BASE_URL}/token`).then(function (response) {\n    token = response.data.token;\n    return token;\n  }).catch(function (error) {\n    console.log(error);\n    return error;\n  });\n}\n\nasync function getUsers(page) {\n  try {\n    const response = await axios.get(`${BASE_URL}/users?page=${page}&count=6`);\n    pages = response.data.total_pages;\n    const users = response.data.users.map(_ref => {\n      let {\n        photo,\n        email,\n        id,\n        name,\n        phone,\n        position,\n        position_id,\n        registration_timestamp\n      } = _ref;\n      const avatar = photo ? photo : photoDefault;\n      return {\n        email: email,\n        id: id,\n        name: name,\n        phone: phone,\n        position: position,\n        photo: avatar,\n        position_id: position_id,\n        registration_timestamp: registration_timestamp\n      };\n    });\n    return users;\n  } catch (error) {\n    return error;\n  }\n} // async function getPages(oldTotalPages){\n//     if(oldTotalPages === pages){\n//         console.log('oldpages: ',oldTotalPages)\n//         return oldTotalPages;\n//     } else {\n//         const response = await axios.get(\n//             `${BASE_URL}/users?page=1&count=6`\n//         )\n//         console.log('new-pages: ',response.data.total_pages)\n//         return response.data.total_pages; \n//     }\n// }\n\n\nasync function getPages() {\n  console.log(pages);\n  return pages;\n}\n\nasync function getPositions() {\n  try {\n    const response = await axios.get(`${BASE_URL}/positions`);\n    const positions = response.data.positions;\n    return positions;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function addNewUser(userFormData) {\n  await getNewToken();\n  await axios({\n    method: \"post\",\n    url: `${BASE_URL}/users`,\n    data: userFormData,\n    headers: {\n      \"Token\": token\n    }\n  }).then(function (response) {\n    console.log(response.data);\n\n    if (response.data.success) {\n      console.log('success');\n    } else {\n      console.log('server-error');\n    }\n  }).catch(function (response) {\n    console.log('error response!');\n    console.log(response);\n  });\n}\n\nexport { getNewToken, getUsers, getPositions, addNewUser, getPages };","map":{"version":3,"names":["photoDefault","BASE_URL","axios","require","token","pages","getNewToken","get","then","response","data","catch","error","console","log","getUsers","page","total_pages","users","map","photo","email","id","name","phone","position","position_id","registration_timestamp","avatar","getPages","getPositions","positions","addNewUser","userFormData","method","url","headers","success"],"sources":["/home/pavel/Desktop/Work/abz-test-app/src/services/users-api.js"],"sourcesContent":["import photoDefault from '../images/default-photo.jpg';\n\nconst BASE_URL = 'https://frontend-test-assignment-api.abz.agency/api/v1';\nconst axios = require('axios');\nlet token;\nlet pages;\n\nasync function getNewToken() {\n    await axios.get(`${BASE_URL}/token`)\n    .then(function(response) { \n        token = response.data.token;\n        return token; \n    }) \n    .catch(function(error) { \n        console.log(error)\n        return error;\n    });\n        \n}\n\nasync function getUsers(page) {\n    try {\n        const response = await axios.get(\n            `${BASE_URL}/users?page=${page}&count=6`\n        )\n        pages= response.data.total_pages; \n        const users = response.data.users.map(({photo,email,id,name,phone,position,position_id,registration_timestamp}) => {\n            const avatar = photo\n              ? photo\n              : photoDefault;\n            \n            return {\n                email: email,\n                id: id,\n                name: name,\n                phone: phone,\n                position: position,\n                photo: avatar,\n                position_id: position_id,\n                registration_timestamp: registration_timestamp,\n            };\n          });\n        \n        return users; \n\n    } catch(error){\n        return error;\n    }\n}\n\n// async function getPages(oldTotalPages){\n//     if(oldTotalPages === pages){\n//         console.log('oldpages: ',oldTotalPages)\n//         return oldTotalPages;\n//     } else {\n//         const response = await axios.get(\n//             `${BASE_URL}/users?page=1&count=6`\n//         )\n//         console.log('new-pages: ',response.data.total_pages)\n//         return response.data.total_pages; \n//     }\n// }\n\nasync function getPages(){\n    console.log(pages)\n    return pages;\n}\n\nasync function getPositions() {\n    try{\n        const response = await axios.get(\n            `${BASE_URL}/positions`\n        )\n        const positions = response.data.positions;\n\n        return positions; \n    } catch(error){\n        return error;\n    }\n}\n\nasync function addNewUser(userFormData) {\n    await getNewToken();\n    await axios({\n        method: \"post\",\n        url: `${BASE_URL}/users`,\n        data: userFormData,\n        headers: { \"Token\": token },\n      })\n        .then(function (response) {\n        console.log(response.data);\n            if(response.data.success){\n                console.log('success')\n            }else{\n                console.log('server-error')\n            }\n        })\n        .catch(function (response) {\n            console.log('error response!')\n            console.log(response);\n        });\n}\n\n\nexport {\n    getNewToken,\n    getUsers,\n    getPositions,\n    addNewUser,\n    getPages\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,6BAAzB;AAEA,MAAMC,QAAQ,GAAG,wDAAjB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,KAAJ;AACA,IAAIC,KAAJ;;AAEA,eAAeC,WAAf,GAA6B;EACzB,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEN,QAAS,QAAtB,EACLO,IADK,CACA,UAASC,QAAT,EAAmB;IACrBL,KAAK,GAAGK,QAAQ,CAACC,IAAT,CAAcN,KAAtB;IACA,OAAOA,KAAP;EACH,CAJK,EAKLO,KALK,CAKC,UAASC,KAAT,EAAgB;IACnBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAOA,KAAP;EACH,CARK,CAAN;AAUH;;AAED,eAAeG,QAAf,CAAwBC,IAAxB,EAA8B;EAC1B,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMP,KAAK,CAACK,GAAN,CAClB,GAAEN,QAAS,eAAce,IAAK,UADZ,CAAvB;IAGAX,KAAK,GAAEI,QAAQ,CAACC,IAAT,CAAcO,WAArB;IACA,MAAMC,KAAK,GAAGT,QAAQ,CAACC,IAAT,CAAcQ,KAAd,CAAoBC,GAApB,CAAwB,QAA6E;MAAA,IAA5E;QAACC,KAAD;QAAOC,KAAP;QAAaC,EAAb;QAAgBC,IAAhB;QAAqBC,KAArB;QAA2BC,QAA3B;QAAoCC,WAApC;QAAgDC;MAAhD,CAA4E;MAC/G,MAAMC,MAAM,GAAGR,KAAK,GAChBA,KADgB,GAEhBpB,YAFJ;MAIA,OAAO;QACHqB,KAAK,EAAEA,KADJ;QAEHC,EAAE,EAAEA,EAFD;QAGHC,IAAI,EAAEA,IAHH;QAIHC,KAAK,EAAEA,KAJJ;QAKHC,QAAQ,EAAEA,QALP;QAMHL,KAAK,EAAEQ,MANJ;QAOHF,WAAW,EAAEA,WAPV;QAQHC,sBAAsB,EAAEA;MARrB,CAAP;IAUD,CAfW,CAAd;IAiBA,OAAOT,KAAP;EAEH,CAxBD,CAwBE,OAAMN,KAAN,EAAY;IACV,OAAOA,KAAP;EACH;AACJ,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeiB,QAAf,GAAyB;EACrBhB,OAAO,CAACC,GAAR,CAAYT,KAAZ;EACA,OAAOA,KAAP;AACH;;AAED,eAAeyB,YAAf,GAA8B;EAC1B,IAAG;IACC,MAAMrB,QAAQ,GAAG,MAAMP,KAAK,CAACK,GAAN,CAClB,GAAEN,QAAS,YADO,CAAvB;IAGA,MAAM8B,SAAS,GAAGtB,QAAQ,CAACC,IAAT,CAAcqB,SAAhC;IAEA,OAAOA,SAAP;EACH,CAPD,CAOE,OAAMnB,KAAN,EAAY;IACV,OAAOA,KAAP;EACH;AACJ;;AAED,eAAeoB,UAAf,CAA0BC,YAA1B,EAAwC;EACpC,MAAM3B,WAAW,EAAjB;EACA,MAAMJ,KAAK,CAAC;IACRgC,MAAM,EAAE,MADA;IAERC,GAAG,EAAG,GAAElC,QAAS,QAFT;IAGRS,IAAI,EAAEuB,YAHE;IAIRG,OAAO,EAAE;MAAE,SAAShC;IAAX;EAJD,CAAD,CAAL,CAMDI,IANC,CAMI,UAAUC,QAAV,EAAoB;IAC1BI,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACC,IAArB;;IACI,IAAGD,QAAQ,CAACC,IAAT,CAAc2B,OAAjB,EAAyB;MACrBxB,OAAO,CAACC,GAAR,CAAY,SAAZ;IACH,CAFD,MAEK;MACDD,OAAO,CAACC,GAAR,CAAY,cAAZ;IACH;EACJ,CAbC,EAcDH,KAdC,CAcK,UAAUF,QAAV,EAAoB;IACvBI,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACAD,OAAO,CAACC,GAAR,CAAYL,QAAZ;EACH,CAjBC,CAAN;AAkBH;;AAGD,SACIH,WADJ,EAEIS,QAFJ,EAGIe,YAHJ,EAIIE,UAJJ,EAKIH,QALJ"},"metadata":{},"sourceType":"module"}