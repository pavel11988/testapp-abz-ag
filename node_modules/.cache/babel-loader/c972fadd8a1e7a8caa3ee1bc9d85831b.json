{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  triggerOnMaskChange: false,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nclass MaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? '';\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0];\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substr(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substr(i, this.suffix?.length);\n\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator); // eslint-disable-next-line no-param-reassign\n\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          const diff = precisionMatch[0].length - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression) {\n    let position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => {};\n\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return '';\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    const inputArray = inputValue.toString().split('');\n\n    if (maskExpression === 'IP') {\n      this.ipError = inputArray.filter(i => i === '.').length < 3 && inputArray.length < 7; // eslint-disable-next-line no-param-reassign\n\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1); // eslint-disable-next-line no-param-reassign\n\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue;\n\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]]?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/)) {\n            result += inputArray[cursor];\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted && !maskExpression.startsWith('separator') ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n\n    return res;\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.maskSpecialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n\n}\n\nMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskApplierService,\n  deps: [{\n    token: config\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskApplierService\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskApplierService,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }\n});\n\nclass MaskService extends MaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.maskExpression = '';\n    this.isNumberValue = false;\n    this.placeHolderCharacter = '_';\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.triggerOnMaskChange = false;\n\n    this.onChange = _ => {};\n  } // eslint-disable-next-line complexity\n\n\n  applyMask(inputValue, maskExpression) {\n    let position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => {};\n\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n\n    if (this.hiddenInput && !this.writingValue) {\n      let actualResult = this.actualValue.split(''); // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n\n      if (this.showMaskTyped) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.removeMask(inputValue);\n      } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator));\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position, justPasted, backspaced) {\n    let cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.maskAvailablePatterns && this.maskAvailablePatterns[maskExpression[index]] && this.maskAvailablePatterns[maskExpression[index]]?.symbol) {\n        return this.maskAvailablePatterns[maskExpression[index]]?.symbol;\n      }\n\n      return curr;\n    }).join('');\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) || this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]);\n\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n\n\n  numberToString(value) {\n    if (!value && value !== 0) {\n      return String(value);\n    }\n\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef.nativeElement;\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n\n  set formElementProperty(_ref) {\n    let [name, value] = _ref;\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i]?.match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i]?.match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n\n\n  _getActiveElement() {\n    let document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.document;\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    let separatorValue = this._retrieveSeparatorValue(result);\n\n    if (this.decimalMarker !== '.' && !Array.isArray(this.decimalMarker)) {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n\n    return Number(separatorValue);\n  }\n\n}\n\nMaskService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskService,\n  deps: [{\n    token: DOCUMENT\n  }, {\n    token: config\n  }, {\n    token: i0.ElementRef\n  }, {\n    token: i0.Renderer2\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nMaskService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskService\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskService,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }\n});\n\nclass MaskDirective {\n  constructor(document, _maskService, _config) {\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.triggerOnMaskChange = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n\n    this.onChange = _ => {};\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      triggerOnMaskChange\n    } = changes;\n\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._maskValue = this._maskExpressionArray[0];\n        this.maskExpression = this._maskExpressionArray[0];\n        this._maskService.maskExpression = this._maskExpressionArray[0];\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || '';\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n      }\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n\n    this._applyMask();\n  } // eslint-disable-next-line complexity\n\n\n  validate(_ref2) {\n    let {\n      value\n    } = _ref2;\n\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (this._maskService.maskAvailablePatterns[key].optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n        return null;\n      }\n\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if (!value && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue('');\n    }\n  }\n\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n\n    const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    }); // only set the selection if the element is active\n\n\n    if (this._getActiveElement() !== el) {\n      return;\n    }\n\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this.onTouch();\n  }\n\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // eslint-disable-next-line complexity\n\n\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, el.selectionEnd);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n            }\n          }\n        }\n      }\n\n      this.checkSelectionOnDeletion(el);\n\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n\n      const cursorStart = el.selectionStart;\n\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n\n\n  async writeValue(inputValue) {\n    if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n      if ('disable' in inputValue) {\n        this.setDisabledState(Boolean(inputValue.disable));\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = inputValue.value;\n    }\n\n    if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this._maskService.numberToString(inputValue);\n\n      if (!Array.isArray(this.decimalMarker)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n      }\n\n      this._maskService.isNumberValue = true;\n    }\n\n    if (typeof inputValue !== 'string') {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n\n    this._inputValue = inputValue;\n\n    this._setMask();\n\n    if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n      // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n      this._maskService.writingValue = true;\n      this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n      this._maskService.writingValue = false;\n    } else {\n      this._maskService.formElementProperty = ['value', inputValue];\n    }\n\n    this._inputValue = inputValue;\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  _getActiveElement() {\n    let document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.document;\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currval, index) => {\n      this._start = currval === '{' ? index : this._start;\n\n      if (currval !== '}') {\n        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n\n}\n\nMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskDirective,\n  deps: [{\n    token: DOCUMENT\n  }, {\n    token: MaskService\n  }, {\n    token: config\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  type: MaskDirective,\n  selector: \"input[mask], textarea[mask]\",\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    triggerOnMaskChange: \"triggerOnMaskChange\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  host: {\n    listeners: {\n      \"paste\": \"onPaste()\",\n      \"ngModelChange\": \"onModelChange($event)\",\n      \"input\": \"onInput($event)\",\n      \"blur\": \"onBlur()\",\n      \"click\": \"onClick($event)\",\n      \"keydown\": \"onKeyDown($event)\"\n    }\n  },\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, MaskService],\n  exportAs: [\"mask\", \"ngxMask\"],\n  usesOnChanges: true,\n  ngImport: i0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, MaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  },\n  propDecorators: {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  }\n});\n\nclass MaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n  }\n\n  transform(value, mask) {\n    let thousandSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n\n}\n\nMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskPipe,\n  deps: [{\n    token: MaskApplierService\n  }],\n  target: i0.ɵɵFactoryTarget.Pipe\n});\nMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskPipe,\n  name: \"mask\"\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: MaskPipe,\n  decorators: [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }\n});\n/**\n * @internal\n */\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? { ...initConfig,\n    ...configValue()\n  } : { ...initConfig,\n    ...configValue\n  };\n}\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: config,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, MaskApplierService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: NgxMaskModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: NgxMaskModule,\n  declarations: [MaskDirective, MaskPipe],\n  exports: [MaskDirective, MaskPipe]\n});\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: NgxMaskModule\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.5\",\n  ngImport: i0,\n  type: NgxMaskModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }]\n});\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"mappings":"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","names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","EventEmitter","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","MaskApplierService","constructor","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substr","Number","Infinity","inputValue","i","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","diff","substring","_compareOrIncludes","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","checkAndRemoveSuffix","inputArray","toString","ipError","filter","arr","push","cpfCnpjError","startsWith","_stripToDecimal","getPrecision","percentage","base","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","idx","charsToEscape","inputLength","value","comparedValue","excludedValue","minVersion","version","ngImport","type","deps","token","target","decorators","Injectable","Inject","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","onChange","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","c","_applyMask","validate","_createValidationError","withoutValidation","timeMasks","_validateTime","counterOfOpt","key","lastIndexOf","opt","emit","onPaste","onModelChange","onInput","e","el","_inputValue","_setMask","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onTouch","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","some","selector","inputs","outputs","host","listeners","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","exportAs","usesOnChanges","Directive","args","Input","Output","HostListener","MaskPipe","transform","Pipe","pure","initConfig","configValue","Function","NgxMaskModule","forRoot","ngModule","useValue","initialConfig","useFactory","_configFactory","forChild","declarations","exports","NgModule","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"sources":["/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/config.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/mask-applier.service.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/mask.service.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/mask.directive.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/mask.pipe.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/ngx-mask.module.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/lib/custom-keyboard-event.ts","/home/pavel/Desktop/Work/abz-test-app/projects/ngx-mask-lib/src/ngx-mask.ts"],"sourcesContent":["import { InjectionToken, EventEmitter } from '@angular/core';\n\nexport interface IConfig {\n\tsuffix: string;\n\tprefix: string;\n\tthousandSeparator: string;\n\tdecimalMarker: '.' | ',' | ['.', ','];\n\tclearIfNotMatch: boolean;\n\tshowTemplate: boolean;\n\tshowMaskTyped: boolean;\n\tplaceHolderCharacter: string;\n\tshownMaskExpression: string;\n\tdropSpecialCharacters: boolean | string[];\n\tspecialCharacters: string[];\n\thiddenInput: boolean | undefined;\n\tvalidation: boolean;\n\tseparatorLimit: string;\n\tallowNegativeNumbers: boolean;\n\tleadZeroDateTime: boolean;\n\ttriggerOnMaskChange: boolean;\n\tmaskFilled: EventEmitter<void>;\n\tpatterns: {\n\t\t[character: string]: {\n\t\t\tpattern: RegExp;\n\t\t\toptional?: boolean;\n\t\t\tsymbol?: string;\n\t\t};\n\t};\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('ngx-mask config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('new ngx-mask config');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken(\n\t'initial ngx-mask config',\n);\n\nexport const initialConfig: IConfig = {\n\tsuffix: '',\n\tprefix: '',\n\tthousandSeparator: ' ',\n\tdecimalMarker: ['.', ','],\n\tclearIfNotMatch: false,\n\tshowTemplate: false,\n\tshowMaskTyped: false,\n\tplaceHolderCharacter: '_',\n\tdropSpecialCharacters: true,\n\thiddenInput: undefined,\n\tshownMaskExpression: '',\n\tseparatorLimit: '',\n\tallowNegativeNumbers: false,\n\tvalidation: true,\n\t// eslint-disable-next-line @typescript-eslint/quotes\n\tspecialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n\tleadZeroDateTime: false,\n\ttriggerOnMaskChange: false,\n\tmaskFilled: new EventEmitter<void>(),\n\tpatterns: {\n\t\t'0': {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\t'9': {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t\toptional: true,\n\t\t},\n\t\tX: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t\tsymbol: '*',\n\t\t},\n\t\tA: {\n\t\t\tpattern: new RegExp('[a-zA-Z0-9]'),\n\t\t},\n\t\tS: {\n\t\t\tpattern: new RegExp('[a-zA-Z]'),\n\t\t},\n\t\tU: {\n\t\t\tpattern: new RegExp('[A-Z]'),\n\t\t},\n\t\tL: {\n\t\t\tpattern: new RegExp('[a-z]'),\n\t\t},\n\t\td: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\tm: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\tM: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\tH: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\th: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t\ts: {\n\t\t\tpattern: new RegExp('\\\\d'),\n\t\t},\n\t},\n};\n\nexport const timeMasks: string[] = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n\nexport const withoutValidation: string[] = [\n\t'percent',\n\t'Hh',\n\t's0',\n\t'm0',\n\t'separator',\n\t'd0/M0/0000',\n\t'd0/M0',\n\t'd0',\n\t'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\tpublic dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n\n\tpublic hiddenInput: IConfig['hiddenInput'];\n\n\tpublic showTemplate!: IConfig['showTemplate'];\n\n\tpublic clearIfNotMatch!: IConfig['clearIfNotMatch'];\n\n\tpublic maskExpression: string = '';\n\n\tpublic actualValue: string = '';\n\n\tpublic shownMaskExpression: string = '';\n\n\tpublic maskSpecialCharacters!: IConfig['specialCharacters'];\n\n\tpublic maskAvailablePatterns!: IConfig['patterns'];\n\n\tpublic prefix!: IConfig['prefix'];\n\n\tpublic suffix!: IConfig['suffix'];\n\n\tpublic thousandSeparator!: IConfig['thousandSeparator'];\n\n\tpublic decimalMarker!: IConfig['decimalMarker'];\n\n\tpublic customPattern!: IConfig['patterns'];\n\n\tpublic ipError?: boolean;\n\n\tpublic cpfCnpjError?: boolean;\n\n\tpublic showMaskTyped!: IConfig['showMaskTyped'];\n\n\tpublic placeHolderCharacter!: IConfig['placeHolderCharacter'];\n\n\tpublic validation: IConfig['validation'];\n\n\tpublic separatorLimit: IConfig['separatorLimit'];\n\n\tpublic allowNegativeNumbers: IConfig['allowNegativeNumbers'];\n\n\tpublic leadZeroDateTime: IConfig['leadZeroDateTime'];\n\n\tprivate _shift!: Set<number>;\n\n\tpublic constructor(@Inject(config) protected _config: IConfig) {\n\t\tthis._shift = new Set();\n\t\tthis.clearIfNotMatch = this._config.clearIfNotMatch;\n\t\tthis.dropSpecialCharacters = this._config.dropSpecialCharacters;\n\t\tthis.maskSpecialCharacters = this._config.specialCharacters;\n\t\tthis.maskAvailablePatterns = this._config.patterns;\n\t\tthis.prefix = this._config.prefix;\n\t\tthis.suffix = this._config.suffix;\n\t\tthis.thousandSeparator = this._config.thousandSeparator;\n\t\tthis.decimalMarker = this._config.decimalMarker;\n\t\tthis.hiddenInput = this._config.hiddenInput;\n\t\tthis.showMaskTyped = this._config.showMaskTyped;\n\t\tthis.placeHolderCharacter = this._config.placeHolderCharacter;\n\t\tthis.validation = this._config.validation;\n\t\tthis.separatorLimit = this._config.separatorLimit;\n\t\tthis.allowNegativeNumbers = this._config.allowNegativeNumbers;\n\t\tthis.leadZeroDateTime = this._config.leadZeroDateTime;\n\t}\n\n\tpublic applyMaskWithPattern(\n\t\tinputValue: string,\n\t\tmaskAndPattern: [string, IConfig['patterns']],\n\t): string {\n\t\tconst [mask, customPattern] = maskAndPattern;\n\t\tthis.customPattern = customPattern;\n\t\treturn this.applyMask(inputValue, mask);\n\t}\n\n\tpublic applyMask(\n\t\tinputValue: string | object | boolean | null | undefined,\n\t\tmaskExpression: string,\n\t\tposition: number = 0,\n\t\tjustPasted: boolean = false,\n\t\tbackspaced: boolean = false,\n\t\tcb: Function = () => {},\n\t): string {\n\t\tif (!maskExpression || typeof inputValue !== 'string') {\n\t\t\treturn '';\n\t\t}\n\t\tlet cursor = 0;\n\t\tlet result = '';\n\t\tlet multi = false;\n\t\tlet backspaceShift = false;\n\t\tlet shift = 1;\n\t\tlet stepBack = false;\n\t\tif (inputValue.slice(0, this.prefix.length) === this.prefix) {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = inputValue.slice(this.prefix.length, inputValue.length);\n\t\t}\n\t\tif (!!this.suffix && inputValue?.length > 0) {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = this.checkAndRemoveSuffix(inputValue);\n\t\t}\n\t\tconst inputArray: string[] = inputValue.toString().split('');\n\t\tif (maskExpression === 'IP') {\n\t\t\tthis.ipError =\n\t\t\t\tinputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7;\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tmaskExpression = '099.099.099.099';\n\t\t}\n\t\tconst arr: string[] = [];\n\t\tfor (let i = 0; i < inputValue.length; i++) {\n\t\t\tif (inputValue[i]?.match('\\\\d')) {\n\t\t\t\tarr.push(inputValue[i]!);\n\t\t\t}\n\t\t}\n\t\tif (maskExpression === 'CPF_CNPJ') {\n\t\t\tthis.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\t\t\tif (arr.length > 11) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tmaskExpression = '00.000.000/0000-00';\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tmaskExpression = '000.000.000-00';\n\t\t\t}\n\t\t}\n\t\tif (maskExpression.startsWith('percent')) {\n\t\t\tif (\n\t\t\t\tinputValue.match('[a-z]|[A-Z]') ||\n\t\t\t\tinputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = this._stripToDecimal(inputValue);\n\t\t\t\tconst precision: number = this.getPrecision(maskExpression);\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tinputValue.indexOf('.') > 0 &&\n\t\t\t\t!this.percentage(inputValue.substring(0, inputValue.indexOf('.')))\n\t\t\t) {\n\t\t\t\tconst base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n\t\t\t}\n\t\t\tif (this.percentage(inputValue)) {\n\t\t\t\tresult = inputValue;\n\t\t\t} else {\n\t\t\t\tresult = inputValue.substring(0, inputValue.length - 1);\n\t\t\t}\n\t\t} else if (maskExpression.startsWith('separator')) {\n\t\t\tif (\n\t\t\t\tinputValue.match('[wа-яА-Я]') ||\n\t\t\t\tinputValue.match('[ЁёА-я]') ||\n\t\t\t\tinputValue.match('[a-z]|[A-Z]') ||\n\t\t\t\tinputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n\t\t\t\tinputValue.match('[^A-Za-z0-9,]')\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = this._stripToDecimal(inputValue);\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue =\n\t\t\t\tinputValue.length > 1 &&\n\t\t\t\tinputValue[0] === '0' &&\n\t\t\t\t!this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n\t\t\t\t!backspaced\n\t\t\t\t\t? inputValue.slice(1, inputValue.length)\n\t\t\t\t\t: inputValue;\n\n\t\t\tif (backspaced) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = this._compareOrIncludes(\n\t\t\t\t\tinputValue[inputValue.length - 1],\n\t\t\t\t\tthis.decimalMarker,\n\t\t\t\t\tthis.thousandSeparator,\n\t\t\t\t)\n\t\t\t\t\t? inputValue.slice(0, inputValue.length - 1)\n\t\t\t\t\t: inputValue;\n\t\t\t}\n\t\t\t// TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n\t\t\t//  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\t\t\tconst thousandSeparatorCharEscaped: string = this._charToRegExpExpression(\n\t\t\t\tthis.thousandSeparator,\n\t\t\t);\n\t\t\tlet invalidChars: string = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(\n\t\t\t\tthousandSeparatorCharEscaped,\n\t\t\t\t'',\n\t\t\t);\n\t\t\t//.replace(decimalMarkerEscaped, '');\n\t\t\tif (Array.isArray(this.decimalMarker)) {\n\t\t\t\tfor (const marker of this.decimalMarker) {\n\t\t\t\t\tinvalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinvalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n\t\t\t}\n\n\t\t\tconst invalidCharRegexp: RegExp = new RegExp('[' + invalidChars + ']');\n\n\t\t\tif (\n\t\t\t\tinputValue.match(invalidCharRegexp) ||\n\t\t\t\t(inputValue.length === 1 &&\n\t\t\t\t\tthis._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = inputValue.substring(0, inputValue.length - 1);\n\t\t\t}\n\n\t\t\tconst precision: number = this.getPrecision(maskExpression);\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n\t\t\tconst strForSep: string = inputValue.replace(\n\t\t\t\tnew RegExp(thousandSeparatorCharEscaped, 'g'),\n\t\t\t\t'',\n\t\t\t);\n\t\t\tresult = this._formatWithSeparators(\n\t\t\t\tstrForSep,\n\t\t\t\tthis.thousandSeparator,\n\t\t\t\tthis.decimalMarker,\n\t\t\t\tprecision,\n\t\t\t);\n\t\t\tconst commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n\t\t\tconst shiftStep: number = result.length - inputValue.length;\n\n\t\t\tif (shiftStep > 0 && result[position] !== ',') {\n\t\t\t\tbackspaceShift = true;\n\t\t\t\tlet _shift = 0;\n\t\t\t\tdo {\n\t\t\t\t\tthis._shift.add(position + _shift);\n\t\t\t\t\t_shift++;\n\t\t\t\t} while (_shift < shiftStep);\n\t\t\t} else if (\n\t\t\t\t(commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n\t\t\t\t(!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n\t\t\t) {\n\t\t\t\tthis._shift.clear();\n\t\t\t\tbackspaceShift = true;\n\t\t\t\tshift = shiftStep;\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tposition += shiftStep;\n\t\t\t\tthis._shift.add(position);\n\t\t\t} else {\n\t\t\t\tthis._shift.clear();\n\t\t\t}\n\t\t} else {\n\t\t\tfor (\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tlet i: number = 0, inputSymbol: string = inputArray[0]!;\n\t\t\t\ti < inputArray.length;\n\t\t\t\ti++, inputSymbol = inputArray[i]!\n\t\t\t) {\n\t\t\t\tif (cursor === maskExpression.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tthis._checkSymbolMask(inputSymbol, maskExpression[cursor]!) &&\n\t\t\t\t\tmaskExpression[cursor + 1] === '?'\n\t\t\t\t) {\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t\tcursor += 2;\n\t\t\t\t} else if (\n\t\t\t\t\tmaskExpression[cursor + 1] === '*' &&\n\t\t\t\t\tmulti &&\n\t\t\t\t\tthis._checkSymbolMask(inputSymbol, maskExpression[cursor + 2]!)\n\t\t\t\t) {\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t\tcursor += 3;\n\t\t\t\t\tmulti = false;\n\t\t\t\t} else if (\n\t\t\t\t\tthis._checkSymbolMask(inputSymbol, maskExpression[cursor]!) &&\n\t\t\t\t\tmaskExpression[cursor + 1] === '*'\n\t\t\t\t) {\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t\tmulti = true;\n\t\t\t\t} else if (\n\t\t\t\t\tmaskExpression[cursor + 1] === '?' &&\n\t\t\t\t\tthis._checkSymbolMask(inputSymbol, maskExpression[cursor + 2]!)\n\t\t\t\t) {\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t\tcursor += 3;\n\t\t\t\t} else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]!)) {\n\t\t\t\t\tif (maskExpression[cursor] === 'H') {\n\t\t\t\t\t\tif (Number(inputSymbol) > 2) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tif (this.leadZeroDateTime) {\n\t\t\t\t\t\t\t\tresult += '0';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (maskExpression[cursor] === 'h') {\n\t\t\t\t\t\tif (result === '2' && Number(inputSymbol) > 3) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (maskExpression[cursor] === 'm') {\n\t\t\t\t\t\tif (Number(inputSymbol) > 5) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tif (this.leadZeroDateTime) {\n\t\t\t\t\t\t\t\tresult += '0';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (maskExpression[cursor] === 's') {\n\t\t\t\t\t\tif (Number(inputSymbol) > 5) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tif (this.leadZeroDateTime) {\n\t\t\t\t\t\t\t\tresult += '0';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst daysCount = 31;\n\t\t\t\t\tif (maskExpression[cursor] === 'd') {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n\t\t\t\t\t\t\tinputValue[cursor + 1] === '/'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tif (this.leadZeroDateTime) {\n\t\t\t\t\t\t\t\tresult += '0';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (maskExpression[cursor] === 'M') {\n\t\t\t\t\t\tconst monthsCount = 12;\n\t\t\t\t\t\t// mask without day\n\t\t\t\t\t\tconst withoutDays: boolean =\n\t\t\t\t\t\t\tcursor === 0 &&\n\t\t\t\t\t\t\t(Number(inputSymbol) > 2 ||\n\t\t\t\t\t\t\t\tNumber(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n\t\t\t\t\t\t\t\tinputValue[cursor + 1] === '/');\n\t\t\t\t\t\t// day<10 && month<12 for input\n\t\t\t\t\t\tconst day1monthInput: boolean =\n\t\t\t\t\t\t\tinputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n\t\t\t\t\t\t\t((inputValue[cursor - 2] === '/' &&\n\t\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n\t\t\t\t\t\t\t\tinputValue[cursor] !== '/') ||\n\t\t\t\t\t\t\t\tinputValue[cursor] === '/' ||\n\t\t\t\t\t\t\t\t(inputValue[cursor - 3] === '/' &&\n\t\t\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n\t\t\t\t\t\t\t\t\tinputValue[cursor - 1] !== '/') ||\n\t\t\t\t\t\t\t\tinputValue[cursor - 1] === '/');\n\t\t\t\t\t\t// 10<day<31 && month<12 for input\n\t\t\t\t\t\tconst day2monthInput: boolean =\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n\t\t\t\t\t\t\t!inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n\t\t\t\t\t\t\tinputValue[cursor - 1] === '/' &&\n\t\t\t\t\t\t\t(Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n\t\t\t\t\t\t\t\tinputValue[cursor + 1] === '/');\n\t\t\t\t\t\t// day<10 && month<12 for paste whole data\n\t\t\t\t\t\tconst day1monthPaste: boolean =\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n\t\t\t\t\t\t\t!inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n\t\t\t\t\t\t\t!inputValue.slice(cursor - 2, cursor).includes('/') &&\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n\t\t\t\t\t\t// 10<day<31 && month<12 for paste whole data\n\t\t\t\t\t\tconst day2monthPaste: boolean =\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n\t\t\t\t\t\t\t!inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n\t\t\t\t\t\t\tinputValue[cursor - 1] !== '/' &&\n\t\t\t\t\t\t\tNumber(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n\t\t\t\t\t\t\twithoutDays ||\n\t\t\t\t\t\t\tday1monthInput ||\n\t\t\t\t\t\t\tday2monthInput ||\n\t\t\t\t\t\t\tday1monthPaste ||\n\t\t\t\t\t\t\tday2monthPaste\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcursor += 1;\n\t\t\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tif (this.leadZeroDateTime) {\n\t\t\t\t\t\t\t\tresult += '0';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t\tcursor++;\n\t\t\t\t} else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]!) !== -1) {\n\t\t\t\t\tresult += maskExpression[cursor];\n\t\t\t\t\tcursor++;\n\t\t\t\t\tthis._shiftStep(maskExpression, cursor, inputArray.length);\n\t\t\t\t\ti--;\n\t\t\t\t} else if (\n\t\t\t\t\tthis.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n\t\t\t\t\tthis.maskAvailablePatterns[maskExpression[cursor]!] &&\n\t\t\t\t\tthis.maskAvailablePatterns[maskExpression[cursor]!]?.optional\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!!inputArray[cursor] &&\n\t\t\t\t\t\tmaskExpression !== '099.099.099.099' &&\n\t\t\t\t\t\tmaskExpression !== '000.000.000-00' &&\n\t\t\t\t\t\tmaskExpression !== '00.000.000/0000-00' &&\n\t\t\t\t\t\t!maskExpression.match(/^9+\\.0+$/)\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult += inputArray[cursor];\n\t\t\t\t\t}\n\t\t\t\t\tcursor++;\n\t\t\t\t\ti--;\n\t\t\t\t} else if (\n\t\t\t\t\tthis.maskExpression[cursor + 1] === '*' &&\n\t\t\t\t\tthis._findSpecialChar(this.maskExpression[cursor + 2]!) &&\n\t\t\t\t\tthis._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n\t\t\t\t\tmulti\n\t\t\t\t) {\n\t\t\t\t\tcursor += 3;\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t} else if (\n\t\t\t\t\tthis.maskExpression[cursor + 1] === '?' &&\n\t\t\t\t\tthis._findSpecialChar(this.maskExpression[cursor + 2]!) &&\n\t\t\t\t\tthis._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n\t\t\t\t\tmulti\n\t\t\t\t) {\n\t\t\t\t\tcursor += 3;\n\t\t\t\t\tresult += inputSymbol;\n\t\t\t\t} else if (\n\t\t\t\t\tthis.showMaskTyped &&\n\t\t\t\t\tthis.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n\t\t\t\t\tinputSymbol !== this.placeHolderCharacter\n\t\t\t\t) {\n\t\t\t\t\tstepBack = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tresult.length + 1 === maskExpression.length &&\n\t\t\tthis.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]!) !== -1\n\t\t) {\n\t\t\tresult += maskExpression[maskExpression.length - 1];\n\t\t}\n\n\t\tlet newPosition: number = position + 1;\n\n\t\twhile (this._shift.has(newPosition)) {\n\t\t\tshift++;\n\t\t\tnewPosition++;\n\t\t}\n\n\t\tlet actualShift: number =\n\t\t\tjustPasted && !maskExpression.startsWith('separator')\n\t\t\t\t? cursor\n\t\t\t\t: this._shift.has(position)\n\t\t\t\t? shift\n\t\t\t\t: 0;\n\t\tif (stepBack) {\n\t\t\tactualShift--;\n\t\t}\n\n\t\tcb(actualShift, backspaceShift);\n\t\tif (shift < 0) {\n\t\t\tthis._shift.clear();\n\t\t}\n\t\tlet onlySpecial = false;\n\t\tif (backspaced) {\n\t\t\tonlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n\t\t}\n\t\tlet res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n\t\tif (result.length === 0) {\n\t\t\tres = `${this.prefix}${result}`;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic _findSpecialChar(inputSymbol: string): undefined | string {\n\t\treturn this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n\t}\n\n\tprotected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n\t\tthis.maskAvailablePatterns = this.customPattern\n\t\t\t? this.customPattern\n\t\t\t: this.maskAvailablePatterns;\n\t\treturn (\n\t\t\tthis.maskAvailablePatterns[maskSymbol]! &&\n\t\t\tthis.maskAvailablePatterns[maskSymbol]!.pattern &&\n\t\t\tthis.maskAvailablePatterns[maskSymbol]!.pattern.test(inputSymbol)\n\t\t);\n\t}\n\n\tprivate _formatWithSeparators = (\n\t\tstr: string,\n\t\tthousandSeparatorChar: string,\n\t\tdecimalChars: string | string[],\n\t\tprecision: number,\n\t) => {\n\t\tlet x: string[] = [];\n\t\tlet decimalChar: string = '';\n\t\tif (Array.isArray(decimalChars)) {\n\t\t\tconst regExp = new RegExp(\n\t\t\t\tdecimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'),\n\t\t\t);\n\t\t\tx = str.split(regExp);\n\t\t\tdecimalChar = str.match(regExp)?.[0] ?? '';\n\t\t} else {\n\t\t\tx = str.split(decimalChars);\n\t\t\tdecimalChar = decimalChars;\n\t\t}\n\t\tconst decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n\t\tlet res: string = x[0]!;\n\t\tconst separatorLimit: string = this.separatorLimit.replace(/\\s/g, '');\n\t\tif (separatorLimit && +separatorLimit) {\n\t\t\tif (res[0] === '-') {\n\t\t\t\tres = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n\t\t\t} else {\n\t\t\t\tres = res.slice(0, separatorLimit.length);\n\t\t\t}\n\t\t}\n\t\tconst rgx: RegExp = /(\\d+)(\\d{3})/;\n\n\t\twhile (thousandSeparatorChar && rgx.test(res)) {\n\t\t\tres = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n\t\t}\n\n\t\tif (precision === undefined) {\n\t\t\treturn res + decimals;\n\t\t} else if (precision === 0) {\n\t\t\treturn res;\n\t\t}\n\t\treturn res + decimals.substr(0, precision + 1);\n\t};\n\n\tprivate percentage = (str: string): boolean => {\n\t\treturn Number(str) >= 0 && Number(str) <= 100;\n\t};\n\n\tprivate getPrecision = (maskExpression: string): number => {\n\t\tconst x: string[] = maskExpression.split('.');\n\t\tif (x.length > 1) {\n\t\t\treturn Number(x[x.length - 1]);\n\t\t}\n\n\t\treturn Infinity;\n\t};\n\n\tprivate checkAndRemoveSuffix = (inputValue: string): string => {\n\t\tfor (let i = this.suffix?.length - 1; i >= 0; i--) {\n\t\t\tconst substr = this.suffix.substr(i, this.suffix?.length);\n\t\t\tif (\n\t\t\t\tinputValue.includes(substr) &&\n\t\t\t\t(i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))\n\t\t\t) {\n\t\t\t\treturn inputValue.replace(substr, '');\n\t\t\t}\n\t\t}\n\t\treturn inputValue;\n\t};\n\n\tprivate checkInputPrecision = (\n\t\tinputValue: string,\n\t\tprecision: number,\n\t\tdecimalMarker: IConfig['decimalMarker'],\n\t): string => {\n\t\tif (precision < Infinity) {\n\t\t\t// TODO need think about decimalMarker\n\t\t\tif (Array.isArray(decimalMarker)) {\n\t\t\t\tconst marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tdecimalMarker = marker ? marker : decimalMarker[0];\n\t\t\t}\n\t\t\tconst precisionRegEx: RegExp = new RegExp(\n\t\t\t\tthis._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`,\n\t\t\t);\n\n\t\t\tconst precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n\t\t\tif (precisionMatch && precisionMatch[0]!.length - 1 > precision) {\n\t\t\t\tconst diff = precisionMatch[0]!.length - 1 - precision;\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = inputValue.substring(0, inputValue.length - diff);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tprecision === 0 &&\n\t\t\t\tthis._compareOrIncludes(\n\t\t\t\t\tinputValue[inputValue.length - 1],\n\t\t\t\t\tdecimalMarker,\n\t\t\t\t\tthis.thousandSeparator,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = inputValue.substring(0, inputValue.length - 1);\n\t\t\t}\n\t\t}\n\t\treturn inputValue;\n\t};\n\n\tprivate _stripToDecimal(str: string): string {\n\t\treturn str\n\t\t\t.split('')\n\t\t\t.filter((i: string, idx: number) => {\n\t\t\t\treturn (\n\t\t\t\t\ti.match('^-?\\\\d') ||\n\t\t\t\t\ti.match('\\\\s') ||\n\t\t\t\t\ti === '.' ||\n\t\t\t\t\ti === ',' ||\n\t\t\t\t\t(i === '-' && idx === 0 && this.allowNegativeNumbers)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\tprivate _charToRegExpExpression(char: string): string {\n\t\t// if (Array.isArray(char)) {\n\t\t// \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n\t\t// }\n\t\tif (char) {\n\t\t\tconst charsToEscape = '[\\\\^$.|?*+()';\n\t\t\treturn char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n\t\t}\n\t\treturn char;\n\t}\n\n\tprivate _shiftStep(maskExpression: string, cursor: number, inputLength: number) {\n\t\tconst shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\t\tthis._shift.add(shiftStep + this.prefix.length || 0);\n\t}\n\n\tprotected _compareOrIncludes<T>(value: T, comparedValue: T | T[], excludedValue: T): boolean {\n\t\treturn Array.isArray(comparedValue)\n\t\t\t? comparedValue.filter((v) => v !== excludedValue).includes(value)\n\t\t\t: value === comparedValue;\n\t}\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { config, IConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n\tpublic override maskExpression: string = '';\n\n\tpublic isNumberValue: boolean = false;\n\n\tpublic override placeHolderCharacter: string = '_';\n\n\tpublic maskIsShown: string = '';\n\n\tpublic selStart: number | null = null;\n\n\tpublic selEnd: number | null = null;\n\n\t/**\n\t * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n\t * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n\t */\n\tpublic writingValue: boolean = false;\n\n\tpublic maskChanged: boolean = false;\n\n\tpublic triggerOnMaskChange: boolean = false;\n\n\tpublic onChange = (_: any) => {};\n\n\tpublic constructor(\n\t\t@Inject(DOCUMENT) private document: any,\n\t\t@Inject(config) protected override _config: IConfig,\n\t\tprivate _elementRef: ElementRef,\n\t\tprivate _renderer: Renderer2,\n\t) {\n\t\tsuper(_config);\n\t}\n\n\t// eslint-disable-next-line complexity\n\tpublic override applyMask(\n\t\tinputValue: string,\n\t\tmaskExpression: string,\n\t\tposition: number = 0,\n\t\tjustPasted = false,\n\t\tbackspaced = false,\n\t\tcb: Function = () => {},\n\t): string {\n\t\tif (!maskExpression) {\n\t\t\treturn inputValue !== this.actualValue ? this.actualValue : inputValue;\n\t\t}\n\t\tthis.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\t\tif (this.maskExpression === 'IP' && this.showMaskTyped) {\n\t\t\tthis.maskIsShown = this.showMaskInInput(inputValue || '#');\n\t\t}\n\t\tif (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n\t\t\tthis.maskIsShown = this.showMaskInInput(inputValue || '#');\n\t\t}\n\t\tif (!inputValue && this.showMaskTyped) {\n\t\t\tthis.formControlResult(this.prefix);\n\t\t\treturn this.prefix + this.maskIsShown;\n\t\t}\n\t\tconst getSymbol: string | undefined =\n\t\t\t!!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n\t\tlet newInputValue = '';\n\t\tif (this.hiddenInput && !this.writingValue) {\n\t\t\tlet actualResult: string[] = this.actualValue.split('');\n\t\t\t// eslint-disable  @typescript-eslint/no-unused-expressions\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\t\t\tinputValue !== '' && actualResult.length\n\t\t\t\t? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n\t\t\t\t\t? inputValue.length > actualResult.length\n\t\t\t\t\t\t? actualResult.splice(this.selStart, 0, getSymbol!)\n\t\t\t\t\t\t: inputValue.length < actualResult.length\n\t\t\t\t\t\t? actualResult.length - inputValue.length === 1\n\t\t\t\t\t\t\t? actualResult.splice(this.selStart - 1, 1)\n\t\t\t\t\t\t\t: actualResult.splice(this.selStart, this.selEnd - this.selStart)\n\t\t\t\t\t\t: null\n\t\t\t\t\t: null\n\t\t\t\t: (actualResult = []);\n\t\t\tif (this.showMaskTyped) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue = this.removeMask(inputValue);\n\t\t\t}\n\t\t\t// eslint-enable  @typescript-eslint/no-unused-expressions\n\t\t\tnewInputValue =\n\t\t\t\tthis.actualValue.length && actualResult.length <= inputValue.length\n\t\t\t\t\t? this.shiftTypedSymbols(actualResult.join(''))\n\t\t\t\t\t: inputValue;\n\t\t}\n\t\tnewInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n\n\t\tconst result: string = super.applyMask(\n\t\t\tnewInputValue,\n\t\t\tmaskExpression,\n\t\t\tposition,\n\t\t\tjustPasted,\n\t\t\tbackspaced,\n\t\t\tcb,\n\t\t);\n\n\t\tthis.actualValue = this.getActualValue(result);\n\t\t// handle some separator implications:\n\t\t// a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\t\tif (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n\t\t\tthis.decimalMarker = ',';\n\t\t}\n\n\t\t// b) remove decimal marker from list of special characters to mask\n\t\tif (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n\t\t\tthis.maskSpecialCharacters = this.maskSpecialCharacters.filter(\n\t\t\t\t(item: string) =>\n\t\t\t\t\t!this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator), //item !== this.decimalMarker, // !\n\t\t\t);\n\t\t}\n\t\tthis.formControlResult(result);\n\t\tif (!this.showMaskTyped) {\n\t\t\tif (this.hiddenInput) {\n\t\t\t\treturn result && result.length ? this.hideInput(result, this.maskExpression) : result;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tconst resLen: number = result.length;\n\t\tconst prefNmask: string = this.prefix + this.maskIsShown;\n\n\t\tif (this.maskExpression.includes('H')) {\n\t\t\tconst countSkipedSymbol = this._numberSkipedSymbols(result);\n\t\t\treturn result + prefNmask.slice(resLen + countSkipedSymbol);\n\t\t} else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n\t\t\treturn result + prefNmask;\n\t\t}\n\t\treturn result + prefNmask.slice(resLen);\n\t}\n\n\t// get the number of characters that were shifted\n\tprivate _numberSkipedSymbols(value: string): number {\n\t\tconst regex = /(^|\\D)(\\d\\D)/g;\n\t\tlet match = regex.exec(value);\n\t\tlet countSkipedSymbol = 0;\n\t\twhile (match != null) {\n\t\t\tcountSkipedSymbol += 1;\n\t\t\tmatch = regex.exec(value);\n\t\t}\n\t\treturn countSkipedSymbol;\n\t}\n\n\tpublic applyValueChanges(\n\t\tposition: number,\n\t\tjustPasted: boolean,\n\t\tbackspaced: boolean,\n\t\tcb: Function = () => {},\n\t): void {\n\t\tconst formElement = this._elementRef.nativeElement;\n\t\tformElement.value = this.applyMask(\n\t\t\tformElement.value,\n\t\t\tthis.maskExpression,\n\t\t\tposition,\n\t\t\tjustPasted,\n\t\t\tbackspaced,\n\t\t\tcb,\n\t\t);\n\t\tif (formElement === this._getActiveElement()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.clearIfNotMatchFn();\n\t}\n\n\tpublic hideInput(inputValue: string, maskExpression: string): string {\n\t\treturn inputValue\n\t\t\t.split('')\n\t\t\t.map((curr: string, index: number) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.maskAvailablePatterns &&\n\t\t\t\t\tthis.maskAvailablePatterns[maskExpression[index]!] &&\n\t\t\t\t\tthis.maskAvailablePatterns[maskExpression[index]!]?.symbol\n\t\t\t\t) {\n\t\t\t\t\treturn this.maskAvailablePatterns[maskExpression[index]!]?.symbol;\n\t\t\t\t}\n\t\t\t\treturn curr;\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\t// this function is not necessary, it checks result against maskExpression\n\tpublic getActualValue(res: string): string {\n\t\tconst compare: string[] = res\n\t\t\t.split('')\n\t\t\t.filter(\n\t\t\t\t(symbol: string, i: number) =>\n\t\t\t\t\tthis._checkSymbolMask(symbol, this.maskExpression[i]!) ||\n\t\t\t\t\t(this.maskSpecialCharacters.includes(this.maskExpression[i]!) &&\n\t\t\t\t\t\tsymbol === this.maskExpression[i]),\n\t\t\t);\n\t\tif (compare.join('') === res) {\n\t\t\treturn compare.join('');\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic shiftTypedSymbols(inputValue: string): string {\n\t\tlet symbolToReplace = '';\n\t\tconst newInputValue: (string | undefined)[] =\n\t\t\t(inputValue &&\n\t\t\t\tinputValue.split('').map((currSymbol: string, index: number) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.maskSpecialCharacters.includes(inputValue[index + 1]!) &&\n\t\t\t\t\t\tinputValue[index + 1] !== this.maskExpression[index + 1]\n\t\t\t\t\t) {\n\t\t\t\t\t\tsymbolToReplace = currSymbol;\n\t\t\t\t\t\treturn inputValue[index + 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (symbolToReplace.length) {\n\t\t\t\t\t\tconst replaceSymbol: string = symbolToReplace;\n\t\t\t\t\t\tsymbolToReplace = '';\n\t\t\t\t\t\treturn replaceSymbol;\n\t\t\t\t\t}\n\t\t\t\t\treturn currSymbol;\n\t\t\t\t})) ||\n\t\t\t[];\n\t\treturn newInputValue.join('');\n\t}\n\n\t/**\n\t * Convert number value to string\n\t * 3.1415 -> '3.1415'\n\t * 1e-7 -> '0.0000001'\n\t */\n\tpublic numberToString(value: number | string): string {\n\t\tif (!value && value !== 0) {\n\t\t\treturn String(value);\n\t\t}\n\t\treturn Number(value).toLocaleString('fullwide', {\n\t\t\tuseGrouping: false,\n\t\t\tmaximumFractionDigits: 20,\n\t\t});\n\t}\n\n\tpublic showMaskInInput(inputVal?: string): string {\n\t\tif (this.showMaskTyped && !!this.shownMaskExpression) {\n\t\t\tif (this.maskExpression.length !== this.shownMaskExpression.length) {\n\t\t\t\tthrow new Error('Mask expression must match mask placeholder length');\n\t\t\t} else {\n\t\t\t\treturn this.shownMaskExpression;\n\t\t\t}\n\t\t} else if (this.showMaskTyped) {\n\t\t\tif (inputVal) {\n\t\t\t\tif (this.maskExpression === 'IP') {\n\t\t\t\t\treturn this._checkForIp(inputVal);\n\t\t\t\t}\n\t\t\t\tif (this.maskExpression === 'CPF_CNPJ') {\n\t\t\t\t\treturn this._checkForCpfCnpj(inputVal);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic clearIfNotMatchFn(): void {\n\t\tconst formElement = this._elementRef.nativeElement;\n\t\tif (\n\t\t\tthis.clearIfNotMatch &&\n\t\t\tthis.prefix.length + this.maskExpression.length + this.suffix.length !==\n\t\t\t\tformElement.value.replace(/_/g, '').length\n\t\t) {\n\t\t\tthis.formElementProperty = ['value', ''];\n\t\t\tthis.applyMask(formElement.value, this.maskExpression);\n\t\t}\n\t}\n\n\tpublic set formElementProperty([name, value]: [string, string | boolean]) {\n\t\tPromise.resolve().then(() =>\n\t\t\tthis._renderer.setProperty(this._elementRef.nativeElement, name, value),\n\t\t);\n\t}\n\n\tpublic checkSpecialCharAmount(mask: string): number {\n\t\tconst chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n\t\treturn chars.length;\n\t}\n\n\tpublic removeMask(inputValue: string): string {\n\t\treturn this._removeMask(\n\t\t\tthis._removeSuffix(this._removePrefix(inputValue)),\n\t\t\tthis.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter),\n\t\t);\n\t}\n\n\tprivate _checkForIp(inputVal: string): string {\n\t\tif (inputVal === '#') {\n\t\t\treturn `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n\t\t}\n\t\tconst arr: string[] = [];\n\t\tfor (let i = 0; i < inputVal.length; i++) {\n\t\t\tif (inputVal[i]?.match('\\\\d')) {\n\t\t\t\tarr.push(inputVal[i]!);\n\t\t\t}\n\t\t}\n\t\tif (arr.length <= 3) {\n\t\t\treturn `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n\t\t}\n\t\tif (arr.length > 3 && arr.length <= 6) {\n\t\t\treturn `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n\t\t}\n\t\tif (arr.length > 6 && arr.length <= 9) {\n\t\t\treturn this.placeHolderCharacter;\n\t\t}\n\t\tif (arr.length > 9 && arr.length <= 12) {\n\t\t\treturn '';\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate _checkForCpfCnpj(inputVal: string): string {\n\t\tconst cpf =\n\t\t\t`${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\t\tconst cnpj =\n\t\t\t`${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n\t\t\t`-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n\t\tif (inputVal === '#') {\n\t\t\treturn cpf;\n\t\t}\n\t\tconst arr: string[] = [];\n\t\tfor (let i = 0; i < inputVal.length; i++) {\n\t\t\tif (inputVal[i]?.match('\\\\d')) {\n\t\t\t\tarr.push(inputVal[i]!);\n\t\t\t}\n\t\t}\n\t\tif (arr.length <= 3) {\n\t\t\treturn cpf.slice(arr.length, cpf.length);\n\t\t}\n\t\tif (arr.length > 3 && arr.length <= 6) {\n\t\t\treturn cpf.slice(arr.length + 1, cpf.length);\n\t\t}\n\t\tif (arr.length > 6 && arr.length <= 9) {\n\t\t\treturn cpf.slice(arr.length + 2, cpf.length);\n\t\t}\n\t\tif (arr.length > 9 && arr.length < 11) {\n\t\t\treturn cpf.slice(arr.length + 3, cpf.length);\n\t\t}\n\t\tif (arr.length === 11) {\n\t\t\treturn '';\n\t\t}\n\t\tif (arr.length === 12) {\n\t\t\tif (inputVal.length === 17) {\n\t\t\t\treturn cnpj.slice(16, cnpj.length);\n\t\t\t}\n\t\t\treturn cnpj.slice(15, cnpj.length);\n\t\t}\n\t\tif (arr.length > 12 && arr.length <= 14) {\n\t\t\treturn cnpj.slice(arr.length + 4, cnpj.length);\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n\t */\n\tprivate _getActiveElement(document: DocumentOrShadowRoot = this.document): Element | null {\n\t\tconst shadowRootEl = document?.activeElement?.shadowRoot;\n\t\tif (!shadowRootEl?.activeElement) {\n\t\t\treturn document.activeElement;\n\t\t} else {\n\t\t\treturn this._getActiveElement(shadowRootEl);\n\t\t}\n\t}\n\n\t/**\n\t * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n\t * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n\t * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n\t * model value too. Therefore, we don't trigger onChange in this scenario.\n\t * @param inputValue the current form input value\n\t */\n\tprivate formControlResult(inputValue: string): void {\n\t\tif (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n\t\t\tthis.maskChanged = false;\n\t\t\treturn;\n\t\t}\n\t\tif (Array.isArray(this.dropSpecialCharacters)) {\n\t\t\tthis.onChange(\n\t\t\t\tthis._toNumber(\n\t\t\t\t\tthis._removeMask(\n\t\t\t\t\t\tthis._removeSuffix(this._removePrefix(inputValue)),\n\t\t\t\t\t\tthis.dropSpecialCharacters,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (this.dropSpecialCharacters) {\n\t\t\tthis.onChange(this._toNumber(this._checkSymbols(inputValue)));\n\t\t} else {\n\t\t\tthis.onChange(this._removeSuffix(inputValue));\n\t\t}\n\t}\n\n\tprivate _toNumber(value: string | number | undefined | null) {\n\t\tif (!this.isNumberValue || value === '') {\n\t\t\treturn value;\n\t\t}\n\t\tconst num = Number(value);\n\t\treturn Number.isNaN(num) ? value : num;\n\t}\n\n\tprivate _removeMask(value: string, specialCharactersForRemove: string[]): string {\n\t\treturn value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n\t}\n\n\tprivate _removePrefix(value: string): string {\n\t\tif (!this.prefix) {\n\t\t\treturn value;\n\t\t}\n\t\treturn value ? value.replace(this.prefix, '') : value;\n\t}\n\n\tprivate _removeSuffix(value: string): string {\n\t\tif (!this.suffix) {\n\t\t\treturn value;\n\t\t}\n\t\treturn value ? value.replace(this.suffix, '') : value;\n\t}\n\n\tprivate _retrieveSeparatorValue(result: string): string {\n\t\treturn this._removeMask(\n\t\t\tthis._removeSuffix(this._removePrefix(result)),\n\t\t\tthis.maskSpecialCharacters,\n\t\t);\n\t}\n\n\tprivate _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n\t\treturn new RegExp(\n\t\t\tspecialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\n\t\t\t'gi',\n\t\t);\n\t}\n\n\tprivate _checkSymbols(result: string): string | number | undefined | null {\n\t\tif (result === '') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst separatorPrecision: number | null = this._retrieveSeparatorPrecision(this.maskExpression);\n\t\tlet separatorValue: string = this._retrieveSeparatorValue(result);\n\n\t\tif (this.decimalMarker !== '.' && !Array.isArray(this.decimalMarker)) {\n\t\t\tseparatorValue = separatorValue.replace(this.decimalMarker, '.');\n\t\t}\n\n\t\tif (!this.isNumberValue) {\n\t\t\treturn separatorValue;\n\t\t}\n\t\tif (separatorPrecision) {\n\t\t\tif (result === this.decimalMarker) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this._checkPrecision(this.maskExpression, separatorValue);\n\t\t} else {\n\t\t\treturn Number(separatorValue);\n\t\t}\n\t}\n\n\t// TODO should think about helpers or separting decimal precision to own property\n\tprivate _retrieveSeparatorPrecision(maskExpretion: string): number | null {\n\t\tconst matcher: RegExpMatchArray | null = maskExpretion.match(\n\t\t\tnew RegExp(`^separator\\\\.([^d]*)`),\n\t\t);\n\t\treturn matcher ? Number(matcher[1]) : null;\n\t}\n\n\tprivate _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\n\t\tif (separatorExpression.indexOf('2') > 0) {\n\t\t\treturn Number(separatorValue).toFixed(2);\n\t\t}\n\t\treturn Number(separatorValue);\n\t}\n}\n","import {\n\tControlValueAccessor,\n\tFormControl,\n\tNG_VALIDATORS,\n\tNG_VALUE_ACCESSOR,\n\tValidationErrors,\n\tValidator,\n} from '@angular/forms';\nimport {\n\tDirective,\n\tEventEmitter,\n\tforwardRef,\n\tHostListener,\n\tInject,\n\tInput,\n\tOnChanges,\n\tOutput,\n\tSimpleChanges,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { config, IConfig, timeMasks, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n@Directive({\n\tselector: 'input[mask], textarea[mask]',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => MaskDirective),\n\t\t\tmulti: true,\n\t\t},\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => MaskDirective),\n\t\t\tmulti: true,\n\t\t},\n\t\tMaskService,\n\t],\n\texportAs: 'mask,ngxMask',\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges, Validator {\n\t// eslint-disable-next-line @angular-eslint/no-input-rename\n\t@Input('mask') public maskExpression: string = '';\n\n\t@Input() public specialCharacters: IConfig['specialCharacters'] = [];\n\n\t@Input() public patterns: IConfig['patterns'] = {};\n\n\t@Input() public prefix: IConfig['prefix'] = '';\n\n\t@Input() public suffix: IConfig['suffix'] = '';\n\n\t@Input() public thousandSeparator: IConfig['thousandSeparator'] = ' ';\n\n\t@Input() public decimalMarker: IConfig['decimalMarker'] = '.';\n\n\t@Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n\n\t@Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n\n\t@Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n\n\t@Input() public placeHolderCharacter: IConfig['placeHolderCharacter'] | null = null;\n\n\t@Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n\n\t@Input() public showTemplate: IConfig['showTemplate'] | null = null;\n\n\t@Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n\n\t@Input() public validation: IConfig['validation'] | null = null;\n\n\t@Input() public separatorLimit: IConfig['separatorLimit'] | null = null;\n\n\t@Input() public allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null = null;\n\n\t@Input() public leadZeroDateTime: IConfig['leadZeroDateTime'] | null = null;\n\n\t@Input() public triggerOnMaskChange: IConfig['triggerOnMaskChange'] | null = null;\n\n\t@Output() public maskFilled: IConfig['maskFilled'] = new EventEmitter<void>();\n\n\tprivate _maskValue: string = '';\n\n\tprivate _inputValue!: string;\n\n\tprivate _position: number | null = null;\n\n\tprivate _start!: number;\n\n\tprivate _end!: number;\n\n\tprivate _code!: string;\n\n\tprivate _maskExpressionArray: string[] = [];\n\n\tprivate _justPasted: boolean = false;\n\n\tpublic constructor(\n\t\t@Inject(DOCUMENT) private document: any,\n\t\tpublic _maskService: MaskService,\n\t\t@Inject(config) protected _config: IConfig,\n\t) {}\n\n\tpublic onChange = (_: any) => {};\n\n\tpublic onTouch = () => {};\n\n\tpublic ngOnChanges(changes: SimpleChanges): void {\n\t\tconst {\n\t\t\tmaskExpression,\n\t\t\tspecialCharacters,\n\t\t\tpatterns,\n\t\t\tprefix,\n\t\t\tsuffix,\n\t\t\tthousandSeparator,\n\t\t\tdecimalMarker,\n\t\t\tdropSpecialCharacters,\n\t\t\thiddenInput,\n\t\t\tshowMaskTyped,\n\t\t\tplaceHolderCharacter,\n\t\t\tshownMaskExpression,\n\t\t\tshowTemplate,\n\t\t\tclearIfNotMatch,\n\t\t\tvalidation,\n\t\t\tseparatorLimit,\n\t\t\tallowNegativeNumbers,\n\t\t\tleadZeroDateTime,\n\t\t\ttriggerOnMaskChange,\n\t\t} = changes;\n\t\tif (maskExpression) {\n\t\t\tif (\n\t\t\t\tmaskExpression.currentValue !== maskExpression.previousValue &&\n\t\t\t\t!maskExpression.firstChange\n\t\t\t) {\n\t\t\t\tthis._maskService.maskChanged = true;\n\t\t\t}\n\t\t\tif (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n\t\t\t\tthis._maskExpressionArray = maskExpression.currentValue\n\t\t\t\t\t.split('||')\n\t\t\t\t\t.sort((a: string, b: string) => {\n\t\t\t\t\t\treturn a.length - b.length;\n\t\t\t\t\t});\n\t\t\t\tthis._maskValue = this._maskExpressionArray[0]!;\n\t\t\t\tthis.maskExpression = this._maskExpressionArray[0]!;\n\t\t\t\tthis._maskService.maskExpression = this._maskExpressionArray[0]!;\n\t\t\t} else {\n\t\t\t\tthis._maskExpressionArray = [];\n\t\t\t\tthis._maskValue = maskExpression.currentValue || '';\n\t\t\t\tthis._maskService.maskExpression = this._maskValue;\n\t\t\t}\n\t\t}\n\t\tif (specialCharacters) {\n\t\t\tif (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n\t\t\t}\n\t\t}\n\t\t// Only overwrite the mask available patterns if a pattern has actually been passed in\n\t\tif (patterns && patterns.currentValue) {\n\t\t\tthis._maskService.maskAvailablePatterns = patterns.currentValue;\n\t\t}\n\t\tif (prefix) {\n\t\t\tthis._maskService.prefix = prefix.currentValue;\n\t\t}\n\t\tif (suffix) {\n\t\t\tthis._maskService.suffix = suffix.currentValue;\n\t\t}\n\t\tif (thousandSeparator) {\n\t\t\tthis._maskService.thousandSeparator = thousandSeparator.currentValue;\n\t\t}\n\t\tif (decimalMarker) {\n\t\t\tthis._maskService.decimalMarker = decimalMarker.currentValue;\n\t\t}\n\t\tif (dropSpecialCharacters) {\n\t\t\tthis._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n\t\t}\n\t\tif (hiddenInput) {\n\t\t\tthis._maskService.hiddenInput = hiddenInput.currentValue;\n\t\t}\n\t\tif (showMaskTyped) {\n\t\t\tthis._maskService.showMaskTyped = showMaskTyped.currentValue;\n\t\t}\n\t\tif (placeHolderCharacter) {\n\t\t\tthis._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n\t\t}\n\t\tif (shownMaskExpression) {\n\t\t\tthis._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n\t\t}\n\t\tif (showTemplate) {\n\t\t\tthis._maskService.showTemplate = showTemplate.currentValue;\n\t\t}\n\t\tif (clearIfNotMatch) {\n\t\t\tthis._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n\t\t}\n\t\tif (validation) {\n\t\t\tthis._maskService.validation = validation.currentValue;\n\t\t}\n\t\tif (separatorLimit) {\n\t\t\tthis._maskService.separatorLimit = separatorLimit.currentValue;\n\t\t}\n\t\tif (allowNegativeNumbers) {\n\t\t\tthis._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\t\t\tif (this._maskService.allowNegativeNumbers) {\n\t\t\t\tthis._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(\n\t\t\t\t\t(c: string) => c !== '-',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (leadZeroDateTime) {\n\t\t\tthis._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n\t\t}\n\t\tif (triggerOnMaskChange) {\n\t\t\tthis._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n\t\t}\n\t\tthis._applyMask();\n\t}\n\n\t// eslint-disable-next-line complexity\n\tpublic validate({ value }: FormControl): ValidationErrors | null {\n\t\tif (!this._maskService.validation || !this._maskValue) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._maskService.ipError) {\n\t\t\treturn this._createValidationError(value);\n\t\t}\n\t\tif (this._maskService.cpfCnpjError) {\n\t\t\treturn this._createValidationError(value);\n\t\t}\n\t\tif (this._maskValue.startsWith('separator')) {\n\t\t\treturn null;\n\t\t}\n\t\tif (withoutValidation.includes(this._maskValue)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._maskService.clearIfNotMatch) {\n\t\t\treturn null;\n\t\t}\n\t\tif (timeMasks.includes(this._maskValue)) {\n\t\t\treturn this._validateTime(value);\n\t\t}\n\t\tif (value && value.toString().length >= 1) {\n\t\t\tlet counterOfOpt = 0;\n\t\t\tfor (const key in this._maskService.maskAvailablePatterns) {\n\t\t\t\tif (this._maskService.maskAvailablePatterns[key]!.optional) {\n\t\t\t\t\tif (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n\t\t\t\t\t\tconst opt: string = this._maskValue\n\t\t\t\t\t\t\t.split('')\n\t\t\t\t\t\t\t.filter((i: string) => i === key)\n\t\t\t\t\t\t\t.join('');\n\t\t\t\t\t\tcounterOfOpt += opt.length;\n\t\t\t\t\t} else if (this._maskValue.indexOf(key) !== -1) {\n\t\t\t\t\t\tcounterOfOpt++;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._maskValue.indexOf(key) !== -1 &&\n\t\t\t\t\t\tvalue.toString().length >= this._maskValue.indexOf(key)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (counterOfOpt === this._maskValue.length) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis._maskValue.indexOf('{') === 1 &&\n\t\t\t\tvalue.toString().length ===\n\t\t\t\t\tthis._maskValue.length + Number(this._maskValue.split('{')[1]!.split('}')[0]) - 4\n\t\t\t) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n\t\t\t\treturn null;\n\t\t\t} else if (\n\t\t\t\t(this._maskValue.indexOf('*') > 1 &&\n\t\t\t\t\tvalue.toString().length < this._maskValue.indexOf('*')) ||\n\t\t\t\t(this._maskValue.indexOf('?') > 1 &&\n\t\t\t\t\tvalue.toString().length < this._maskValue.indexOf('?')) ||\n\t\t\t\tthis._maskValue.indexOf('{') === 1\n\t\t\t) {\n\t\t\t\treturn this._createValidationError(value);\n\t\t\t}\n\t\t\tif (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n\t\t\t\tconst length: number = this._maskService.dropSpecialCharacters\n\t\t\t\t\t? this._maskValue.length -\n\t\t\t\t\t  this._maskService.checkSpecialCharAmount(this._maskValue) -\n\t\t\t\t\t  counterOfOpt\n\t\t\t\t\t: this._maskValue.length - counterOfOpt;\n\t\t\t\tif (value.toString().length < length) {\n\t\t\t\t\treturn this._createValidationError(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (value) {\n\t\t\tthis.maskFilled.emit();\n\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n\n\t@HostListener('paste')\n\tpublic onPaste() {\n\t\tthis._justPasted = true;\n\t}\n\n\t@HostListener('ngModelChange', ['$event'])\n\tpublic onModelChange(value: any): void {\n\t\t// on form reset we need to update the actualValue\n\t\tif (!value && this._maskService.actualValue) {\n\t\t\tthis._maskService.actualValue = this._maskService.getActualValue('');\n\t\t}\n\t}\n\n\t@HostListener('input', ['$event'])\n\tpublic onInput(e: CustomKeyboardEvent): void {\n\t\tconst el: HTMLInputElement = e.target as HTMLInputElement;\n\t\tthis._inputValue = el.value;\n\n\t\tthis._setMask();\n\n\t\tif (!this._maskValue) {\n\t\t\tthis.onChange(el.value);\n\t\t\treturn;\n\t\t}\n\t\tconst position: number =\n\t\t\tel.selectionStart === 1\n\t\t\t\t? (el.selectionStart as number) + this._maskService.prefix.length\n\t\t\t\t: (el.selectionStart as number);\n\t\tlet caretShift = 0;\n\t\tlet backspaceShift = false;\n\t\tthis._maskService.applyValueChanges(\n\t\t\tposition,\n\t\t\tthis._justPasted,\n\t\t\tthis._code === 'Backspace' || this._code === 'Delete',\n\t\t\t(shift: number, _backspaceShift: boolean) => {\n\t\t\t\tthis._justPasted = false;\n\t\t\t\tcaretShift = shift;\n\t\t\t\tbackspaceShift = _backspaceShift;\n\t\t\t},\n\t\t);\n\t\t// only set the selection if the element is active\n\t\tif (this._getActiveElement() !== el) {\n\t\t\treturn;\n\t\t}\n\t\tthis._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n\t\tlet positionToApply: number = this._position\n\t\t\t? this._inputValue.length + position + caretShift\n\t\t\t: position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\t\tif (positionToApply > this._getActualInputLength()) {\n\t\t\tpositionToApply = this._getActualInputLength();\n\t\t}\n\t\tif (positionToApply < 0) {\n\t\t\tpositionToApply = 0;\n\t\t}\n\t\tel.setSelectionRange(positionToApply, positionToApply);\n\t\tthis._position = null;\n\t}\n\n\t@HostListener('blur')\n\tpublic onBlur(): void {\n\t\tif (this._maskValue) {\n\t\t\tthis._maskService.clearIfNotMatchFn();\n\t\t}\n\t\tthis.onTouch();\n\t}\n\n\t@HostListener('click', ['$event'])\n\tpublic onClick(e: MouseEvent | CustomKeyboardEvent): void {\n\t\tif (!this._maskValue) {\n\t\t\treturn;\n\t\t}\n\t\tconst el: HTMLInputElement = e.target as HTMLInputElement;\n\t\tconst posStart = 0;\n\t\tconst posEnd = 0;\n\t\tif (\n\t\t\tel !== null &&\n\t\t\tel.selectionStart !== null &&\n\t\t\tel.selectionStart === el.selectionEnd &&\n\t\t\tel.selectionStart > this._maskService.prefix.length &&\n\t\t\t// eslint-disable-next-line\n\t\t\t(e as any).keyCode !== 38\n\t\t) {\n\t\t\tif (this._maskService.showMaskTyped) {\n\t\t\t\t// We are showing the mask in the input\n\t\t\t\tthis._maskService.maskIsShown = this._maskService.showMaskInInput();\n\t\t\t\tif (\n\t\t\t\t\tel.setSelectionRange &&\n\t\t\t\t\tthis._maskService.prefix + this._maskService.maskIsShown === el.value\n\t\t\t\t) {\n\t\t\t\t\t// the input ONLY contains the mask, so position the cursor at the start\n\t\t\t\t\tel.focus();\n\t\t\t\t\tel.setSelectionRange(posStart, posEnd);\n\t\t\t\t} else {\n\t\t\t\t\t// the input contains some characters already\n\t\t\t\t\tif (el.selectionStart > this._maskService.actualValue.length) {\n\t\t\t\t\t\t// if the user clicked beyond our value's length, position the cursor at the end of our value\n\t\t\t\t\t\tel.setSelectionRange(\n\t\t\t\t\t\t\tthis._maskService.actualValue.length,\n\t\t\t\t\t\t\tthis._maskService.actualValue.length,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst nextValue: string | null =\n\t\t\t!el.value || el.value === this._maskService.prefix\n\t\t\t\t? this._maskService.prefix + this._maskService.maskIsShown\n\t\t\t\t: el.value;\n\t\t/** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\t\tif (el.value !== nextValue) {\n\t\t\tel.value = nextValue;\n\t\t}\n\n\t\t/** fix of cursor position with prefix when mouse click occur */\n\t\tif (\n\t\t\t((el.selectionStart as number) || (el.selectionEnd as number)) <=\n\t\t\tthis._maskService.prefix.length\n\t\t) {\n\t\t\tel.selectionStart = this._maskService.prefix.length;\n\t\t\treturn;\n\t\t}\n\t\t/** select only inserted text */\n\t\tif ((el.selectionEnd as number) > this._getActualInputLength()) {\n\t\t\tel.selectionEnd = this._getActualInputLength();\n\t\t}\n\t}\n\n\t// eslint-disable-next-line complexity\n\t@HostListener('keydown', ['$event'])\n\tpublic onKeyDown(e: CustomKeyboardEvent): void {\n\t\tif (!this._maskValue) {\n\t\t\treturn;\n\t\t}\n\t\tthis._code = e.code ? e.code : e.key;\n\t\tconst el: HTMLInputElement = e.target as HTMLInputElement;\n\t\tthis._inputValue = el.value;\n\n\t\tthis._setMask();\n\n\t\tif (e.keyCode === 38) {\n\t\t\te.preventDefault();\n\t\t}\n\t\tif (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n\t\t\tif (e.keyCode === 8 && el.value.length === 0) {\n\t\t\t\tel.selectionStart = el.selectionEnd;\n\t\t\t}\n\t\t\tif (e.keyCode === 8 && (el.selectionStart as number) !== 0) {\n\t\t\t\t// If specialChars is false, (shouldn't ever happen) then set to the defaults\n\t\t\t\tthis.specialCharacters = this.specialCharacters?.length\n\t\t\t\t\t? this.specialCharacters\n\t\t\t\t\t: this._config.specialCharacters;\n\t\t\t\tif (this.prefix.length > 1 && (el.selectionStart as number) <= this.prefix.length) {\n\t\t\t\t\tel.setSelectionRange(this.prefix.length, el.selectionEnd);\n\t\t\t\t} else {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._inputValue.length !== (el.selectionStart as number) &&\n\t\t\t\t\t\t(el.selectionStart as number) !== 1\n\t\t\t\t\t) {\n\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\tthis.specialCharacters.includes(\n\t\t\t\t\t\t\t\tthis._inputValue[(el.selectionStart as number) - 1]!.toString(),\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t((this.prefix.length >= 1 && (el.selectionStart as number) > this.prefix.length) ||\n\t\t\t\t\t\t\t\tthis.prefix.length === 0)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tel.setSelectionRange((el.selectionStart as number) - 1, el.selectionEnd);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.checkSelectionOnDeletion(el);\n\t\t\tif (\n\t\t\t\tthis._maskService.prefix.length &&\n\t\t\t\t(el.selectionStart as number) <= this._maskService.prefix.length &&\n\t\t\t\t(el.selectionEnd as number) <= this._maskService.prefix.length\n\t\t\t) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\tconst cursorStart: number | null = el.selectionStart;\n\t\t\tif (\n\t\t\t\te.keyCode === 8 &&\n\t\t\t\t!el.readOnly &&\n\t\t\t\tcursorStart === 0 &&\n\t\t\t\tel.selectionEnd === el.value.length &&\n\t\t\t\tel.value.length !== 0\n\t\t\t) {\n\t\t\t\tthis._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\t\t\t\tthis._maskService.applyMask(\n\t\t\t\t\tthis._maskService.prefix,\n\t\t\t\t\tthis._maskService.maskExpression,\n\t\t\t\t\tthis._position,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t!!this.suffix &&\n\t\t\tthis.suffix.length > 1 &&\n\t\t\tthis._inputValue.length - this.suffix.length < (el.selectionStart as number)\n\t\t) {\n\t\t\tel.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n\t\t} else if (\n\t\t\t(e.keyCode === 65 && e.ctrlKey) ||\n\t\t\t(e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n\t\t) {\n\t\t\tel.setSelectionRange(0, this._getActualInputLength());\n\t\t\te.preventDefault();\n\t\t}\n\t\tthis._maskService.selStart = el.selectionStart;\n\t\tthis._maskService.selEnd = el.selectionEnd;\n\t}\n\n\t/** It writes the value in the input */\n\tpublic async writeValue(\n\t\tinputValue: string | number | { value: string | number; disable?: boolean },\n\t): Promise<void> {\n\t\tif (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n\t\t\tif ('disable' in inputValue) {\n\t\t\t\tthis.setDisabledState(Boolean(inputValue.disable));\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = inputValue.value;\n\t\t}\n\n\t\tif (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = this._maskService.numberToString(inputValue);\n\t\t\tif (!Array.isArray(this.decimalMarker)) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tinputValue =\n\t\t\t\t\tthis.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n\t\t\t}\n\t\t\tthis._maskService.isNumberValue = true;\n\t\t}\n\n\t\tif (typeof inputValue !== 'string') {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tinputValue = '';\n\t\t}\n\n\t\tthis._inputValue = inputValue;\n\t\tthis._setMask();\n\n\t\tif (\n\t\t\t(inputValue && this._maskService.maskExpression) ||\n\t\t\t(this._maskService.maskExpression &&\n\t\t\t\t(this._maskService.prefix || this._maskService.showMaskTyped))\n\t\t) {\n\t\t\t// Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n\t\t\tthis._maskService.writingValue = true;\n\t\t\tthis._maskService.formElementProperty = [\n\t\t\t\t'value',\n\t\t\t\tthis._maskService.applyMask(inputValue, this._maskService.maskExpression),\n\t\t\t];\n\t\t\t// Let the service know we've finished writing value\n\t\t\tthis._maskService.writingValue = false;\n\t\t} else {\n\t\t\tthis._maskService.formElementProperty = ['value', inputValue];\n\t\t}\n\t\tthis._inputValue = inputValue;\n\t}\n\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChange = fn;\n\t\tthis._maskService.onChange = this.onChange;\n\t}\n\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\tprivate _getActiveElement(document: DocumentOrShadowRoot = this.document): Element | null {\n\t\tconst shadowRootEl = document?.activeElement?.shadowRoot;\n\t\tif (!shadowRootEl?.activeElement) {\n\t\t\treturn document.activeElement;\n\t\t} else {\n\t\t\treturn this._getActiveElement(shadowRootEl);\n\t\t}\n\t}\n\n\tpublic checkSelectionOnDeletion(el: HTMLInputElement): void {\n\t\tel.selectionStart = Math.min(\n\t\t\tMath.max(this.prefix.length, el.selectionStart as number),\n\t\t\tthis._inputValue.length - this.suffix.length,\n\t\t);\n\t\tel.selectionEnd = Math.min(\n\t\t\tMath.max(this.prefix.length, el.selectionEnd as number),\n\t\t\tthis._inputValue.length - this.suffix.length,\n\t\t);\n\t}\n\n\t/** It disables the input element */\n\tpublic setDisabledState(isDisabled: boolean): void {\n\t\tthis._maskService.formElementProperty = ['disabled', isDisabled];\n\t}\n\n\tprivate _repeatPatternSymbols(maskExp: string): string {\n\t\treturn (\n\t\t\t(maskExp.match(/{[0-9]+}/) &&\n\t\t\t\tmaskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n\t\t\t\t\tthis._start = currval === '{' ? index : this._start;\n\n\t\t\t\t\tif (currval !== '}') {\n\t\t\t\t\t\treturn this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n\t\t\t\t\t}\n\t\t\t\t\tthis._end = index;\n\t\t\t\t\tconst repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n\t\t\t\t\tconst replaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n\t\t\t\t\treturn accum + replaceWith;\n\t\t\t\t}, '')) ||\n\t\t\tmaskExp\n\t\t);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate _applyMask(): any {\n\t\tthis._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n\t\tthis._maskService.formElementProperty = [\n\t\t\t'value',\n\t\t\tthis._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n\t\t];\n\t}\n\n\tprivate _validateTime(value: string): ValidationErrors | null {\n\t\tconst rowMaskLen: number = this._maskValue.split('').filter((s: string) => s !== ':').length;\n\t\tif (!value) {\n\t\t\treturn null; // Don't validate empty values to allow for optional form control\n\t\t}\n\n\t\tif (\n\t\t\t(+value[value.length - 1]! === 0 && value.length < rowMaskLen) ||\n\t\t\tvalue.length <= rowMaskLen - 2\n\t\t) {\n\t\t\treturn this._createValidationError(value);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _getActualInputLength() {\n\t\treturn (\n\t\t\tthis._maskService.actualValue.length ||\n\t\t\tthis._maskService.actualValue.length + this._maskService.prefix.length\n\t\t);\n\t}\n\n\tprivate _createValidationError(actualValue: string): ValidationErrors {\n\t\treturn {\n\t\t\tmask: {\n\t\t\t\trequiredMask: this._maskValue,\n\t\t\t\tactualValue,\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate _setMask() {\n\t\tif (this._maskExpressionArray.length > 0) {\n\t\t\tthis._maskExpressionArray.some((mask): boolean | void => {\n\t\t\t\tconst test =\n\t\t\t\t\tthis._maskService.removeMask(this._inputValue)?.length <=\n\t\t\t\t\tthis._maskService.removeMask(mask)?.length;\n\t\t\t\tif (this._inputValue && test) {\n\t\t\t\t\tthis._maskValue = mask;\n\t\t\t\t\tthis.maskExpression = mask;\n\t\t\t\t\tthis._maskService.maskExpression = mask;\n\t\t\t\t\treturn test;\n\t\t\t\t} else {\n\t\t\t\t\tthis._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1]!;\n\t\t\t\t\tthis.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1]!;\n\t\t\t\t\tthis._maskService.maskExpression =\n\t\t\t\t\t\tthis._maskExpressionArray[this._maskExpressionArray.length - 1]!;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n\tname: 'mask',\n\tpure: true,\n})\nexport class MaskPipe implements PipeTransform {\n\tpublic constructor(private _maskService: MaskApplierService) {}\n\n\tpublic transform(\n\t\tvalue: string | number,\n\t\tmask: string | [string, IConfig['patterns']],\n\t\tthousandSeparator: string | null = null,\n\t): string {\n\t\tif (!value && typeof value !== 'number') {\n\t\t\treturn '';\n\t\t}\n\t\tif (thousandSeparator) {\n\t\t\tthis._maskService.thousandSeparator = thousandSeparator;\n\t\t}\n\t\tif (typeof mask === 'string') {\n\t\t\treturn this._maskService.applyMask(`${value}`, mask);\n\t\t}\n\t\treturn this._maskService.applyMaskWithPattern(`${value}`, mask);\n\t}\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n/**\n * @internal\n */\nexport function _configFactory(\n\tinitConfig: optionsConfig,\n\tconfigValue: optionsConfig | (() => optionsConfig),\n): optionsConfig {\n\treturn configValue instanceof Function\n\t\t? { ...initConfig, ...configValue() }\n\t\t: { ...initConfig, ...configValue };\n}\n@NgModule({\n\texports: [MaskDirective, MaskPipe],\n\tdeclarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n\tpublic static forRoot(\n\t\tconfigValue?: optionsConfig | (() => optionsConfig),\n\t): ModuleWithProviders<NgxMaskModule> {\n\t\treturn {\n\t\t\tngModule: NgxMaskModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: NEW_CONFIG,\n\t\t\t\t\tuseValue: configValue,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: INITIAL_CONFIG,\n\t\t\t\t\tuseValue: initialConfig,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: config,\n\t\t\t\t\tuseFactory: _configFactory,\n\t\t\t\t\tdeps: [INITIAL_CONFIG, NEW_CONFIG],\n\t\t\t\t},\n\t\t\t\tMaskApplierService,\n\t\t\t],\n\t\t};\n\t}\n\n\tpublic static forChild(): ModuleWithProviders<NgxMaskModule> {\n\t\treturn {\n\t\t\tngModule: NgxMaskModule,\n\t\t};\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\ndeclare var global: any;\n\nconst commonjsGlobal =\n\ttypeof globalThis !== 'undefined'\n\t\t? globalThis\n\t\t: typeof window !== 'undefined'\n\t\t? window\n\t\t: typeof global !== 'undefined'\n\t\t? global\n\t\t: typeof self !== 'undefined'\n\t\t? self\n\t\t: {};\n\n(function () {\n\tif (!commonjsGlobal.KeyboardEvent) {\n\t\tcommonjsGlobal.KeyboardEvent = function (_eventType: any, _init: any) {};\n\t}\n})();\n\nexport type CustomKeyboardEvent = KeyboardEvent;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}